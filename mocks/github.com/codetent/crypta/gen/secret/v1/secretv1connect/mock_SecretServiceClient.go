// Code generated by mockery v2.38.0. DO NOT EDIT.

package secretv1connect

import (
	context "context"

	connect "connectrpc.com/connect"

	mock "github.com/stretchr/testify/mock"

	secretv1 "github.com/codetent/crypta/gen/secret/v1"
)

// MockSecretServiceClient is an autogenerated mock type for the SecretServiceClient type
type MockSecretServiceClient struct {
	mock.Mock
}

type MockSecretServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecretServiceClient) EXPECT() *MockSecretServiceClient_Expecter {
	return &MockSecretServiceClient_Expecter{mock: &_m.Mock}
}

// GetSecret provides a mock function with given fields: _a0, _a1
func (_m *MockSecretServiceClient) GetSecret(_a0 context.Context, _a1 *connect.Request[secretv1.GetSecretRequest]) (*connect.Response[secretv1.GetSecretResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSecret")
	}

	var r0 *connect.Response[secretv1.GetSecretResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[secretv1.GetSecretRequest]) (*connect.Response[secretv1.GetSecretResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[secretv1.GetSecretRequest]) *connect.Response[secretv1.GetSecretResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[secretv1.GetSecretResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[secretv1.GetSecretRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecretServiceClient_GetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecret'
type MockSecretServiceClient_GetSecret_Call struct {
	*mock.Call
}

// GetSecret is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[secretv1.GetSecretRequest]
func (_e *MockSecretServiceClient_Expecter) GetSecret(_a0 interface{}, _a1 interface{}) *MockSecretServiceClient_GetSecret_Call {
	return &MockSecretServiceClient_GetSecret_Call{Call: _e.mock.On("GetSecret", _a0, _a1)}
}

func (_c *MockSecretServiceClient_GetSecret_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[secretv1.GetSecretRequest])) *MockSecretServiceClient_GetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[secretv1.GetSecretRequest]))
	})
	return _c
}

func (_c *MockSecretServiceClient_GetSecret_Call) Return(_a0 *connect.Response[secretv1.GetSecretResponse], _a1 error) *MockSecretServiceClient_GetSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecretServiceClient_GetSecret_Call) RunAndReturn(run func(context.Context, *connect.Request[secretv1.GetSecretRequest]) (*connect.Response[secretv1.GetSecretResponse], error)) *MockSecretServiceClient_GetSecret_Call {
	_c.Call.Return(run)
	return _c
}

// SetSecret provides a mock function with given fields: _a0, _a1
func (_m *MockSecretServiceClient) SetSecret(_a0 context.Context, _a1 *connect.Request[secretv1.SetSecretRequest]) (*connect.Response[secretv1.SetSecretResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetSecret")
	}

	var r0 *connect.Response[secretv1.SetSecretResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[secretv1.SetSecretRequest]) (*connect.Response[secretv1.SetSecretResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[secretv1.SetSecretRequest]) *connect.Response[secretv1.SetSecretResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[secretv1.SetSecretResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[secretv1.SetSecretRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecretServiceClient_SetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSecret'
type MockSecretServiceClient_SetSecret_Call struct {
	*mock.Call
}

// SetSecret is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[secretv1.SetSecretRequest]
func (_e *MockSecretServiceClient_Expecter) SetSecret(_a0 interface{}, _a1 interface{}) *MockSecretServiceClient_SetSecret_Call {
	return &MockSecretServiceClient_SetSecret_Call{Call: _e.mock.On("SetSecret", _a0, _a1)}
}

func (_c *MockSecretServiceClient_SetSecret_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[secretv1.SetSecretRequest])) *MockSecretServiceClient_SetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[secretv1.SetSecretRequest]))
	})
	return _c
}

func (_c *MockSecretServiceClient_SetSecret_Call) Return(_a0 *connect.Response[secretv1.SetSecretResponse], _a1 error) *MockSecretServiceClient_SetSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecretServiceClient_SetSecret_Call) RunAndReturn(run func(context.Context, *connect.Request[secretv1.SetSecretRequest]) (*connect.Response[secretv1.SetSecretResponse], error)) *MockSecretServiceClient_SetSecret_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecretServiceClient creates a new instance of MockSecretServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecretServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecretServiceClient {
	mock := &MockSecretServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
