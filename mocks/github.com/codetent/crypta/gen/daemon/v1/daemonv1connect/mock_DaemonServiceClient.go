// Code generated by mockery v2.38.0. DO NOT EDIT.

package daemonv1connect

import (
	context "context"

	connect "connectrpc.com/connect"

	daemonv1 "github.com/codetent/crypta/gen/daemon/v1"

	mock "github.com/stretchr/testify/mock"
)

// MockDaemonServiceClient is an autogenerated mock type for the DaemonServiceClient type
type MockDaemonServiceClient struct {
	mock.Mock
}

type MockDaemonServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDaemonServiceClient) EXPECT() *MockDaemonServiceClient_Expecter {
	return &MockDaemonServiceClient_Expecter{mock: &_m.Mock}
}

// GetProcessId provides a mock function with given fields: _a0, _a1
func (_m *MockDaemonServiceClient) GetProcessId(_a0 context.Context, _a1 *connect.Request[daemonv1.GetProcessIdRequest]) (*connect.Response[daemonv1.GetProcessIdResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessId")
	}

	var r0 *connect.Response[daemonv1.GetProcessIdResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[daemonv1.GetProcessIdRequest]) (*connect.Response[daemonv1.GetProcessIdResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[daemonv1.GetProcessIdRequest]) *connect.Response[daemonv1.GetProcessIdResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[daemonv1.GetProcessIdResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[daemonv1.GetProcessIdRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDaemonServiceClient_GetProcessId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessId'
type MockDaemonServiceClient_GetProcessId_Call struct {
	*mock.Call
}

// GetProcessId is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[daemonv1.GetProcessIdRequest]
func (_e *MockDaemonServiceClient_Expecter) GetProcessId(_a0 interface{}, _a1 interface{}) *MockDaemonServiceClient_GetProcessId_Call {
	return &MockDaemonServiceClient_GetProcessId_Call{Call: _e.mock.On("GetProcessId", _a0, _a1)}
}

func (_c *MockDaemonServiceClient_GetProcessId_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[daemonv1.GetProcessIdRequest])) *MockDaemonServiceClient_GetProcessId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[daemonv1.GetProcessIdRequest]))
	})
	return _c
}

func (_c *MockDaemonServiceClient_GetProcessId_Call) Return(_a0 *connect.Response[daemonv1.GetProcessIdResponse], _a1 error) *MockDaemonServiceClient_GetProcessId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDaemonServiceClient_GetProcessId_Call) RunAndReturn(run func(context.Context, *connect.Request[daemonv1.GetProcessIdRequest]) (*connect.Response[daemonv1.GetProcessIdResponse], error)) *MockDaemonServiceClient_GetProcessId_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecret provides a mock function with given fields: _a0, _a1
func (_m *MockDaemonServiceClient) GetSecret(_a0 context.Context, _a1 *connect.Request[daemonv1.GetSecretRequest]) (*connect.Response[daemonv1.GetSecretResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSecret")
	}

	var r0 *connect.Response[daemonv1.GetSecretResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[daemonv1.GetSecretRequest]) (*connect.Response[daemonv1.GetSecretResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[daemonv1.GetSecretRequest]) *connect.Response[daemonv1.GetSecretResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[daemonv1.GetSecretResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[daemonv1.GetSecretRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDaemonServiceClient_GetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecret'
type MockDaemonServiceClient_GetSecret_Call struct {
	*mock.Call
}

// GetSecret is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[daemonv1.GetSecretRequest]
func (_e *MockDaemonServiceClient_Expecter) GetSecret(_a0 interface{}, _a1 interface{}) *MockDaemonServiceClient_GetSecret_Call {
	return &MockDaemonServiceClient_GetSecret_Call{Call: _e.mock.On("GetSecret", _a0, _a1)}
}

func (_c *MockDaemonServiceClient_GetSecret_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[daemonv1.GetSecretRequest])) *MockDaemonServiceClient_GetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[daemonv1.GetSecretRequest]))
	})
	return _c
}

func (_c *MockDaemonServiceClient_GetSecret_Call) Return(_a0 *connect.Response[daemonv1.GetSecretResponse], _a1 error) *MockDaemonServiceClient_GetSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDaemonServiceClient_GetSecret_Call) RunAndReturn(run func(context.Context, *connect.Request[daemonv1.GetSecretRequest]) (*connect.Response[daemonv1.GetSecretResponse], error)) *MockDaemonServiceClient_GetSecret_Call {
	_c.Call.Return(run)
	return _c
}

// SetSecret provides a mock function with given fields: _a0, _a1
func (_m *MockDaemonServiceClient) SetSecret(_a0 context.Context, _a1 *connect.Request[daemonv1.SetSecretRequest]) (*connect.Response[daemonv1.SetSecretResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetSecret")
	}

	var r0 *connect.Response[daemonv1.SetSecretResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[daemonv1.SetSecretRequest]) (*connect.Response[daemonv1.SetSecretResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[daemonv1.SetSecretRequest]) *connect.Response[daemonv1.SetSecretResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[daemonv1.SetSecretResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[daemonv1.SetSecretRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDaemonServiceClient_SetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSecret'
type MockDaemonServiceClient_SetSecret_Call struct {
	*mock.Call
}

// SetSecret is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[daemonv1.SetSecretRequest]
func (_e *MockDaemonServiceClient_Expecter) SetSecret(_a0 interface{}, _a1 interface{}) *MockDaemonServiceClient_SetSecret_Call {
	return &MockDaemonServiceClient_SetSecret_Call{Call: _e.mock.On("SetSecret", _a0, _a1)}
}

func (_c *MockDaemonServiceClient_SetSecret_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[daemonv1.SetSecretRequest])) *MockDaemonServiceClient_SetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[daemonv1.SetSecretRequest]))
	})
	return _c
}

func (_c *MockDaemonServiceClient_SetSecret_Call) Return(_a0 *connect.Response[daemonv1.SetSecretResponse], _a1 error) *MockDaemonServiceClient_SetSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDaemonServiceClient_SetSecret_Call) RunAndReturn(run func(context.Context, *connect.Request[daemonv1.SetSecretRequest]) (*connect.Response[daemonv1.SetSecretResponse], error)) *MockDaemonServiceClient_SetSecret_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDaemonServiceClient creates a new instance of MockDaemonServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDaemonServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDaemonServiceClient {
	mock := &MockDaemonServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
