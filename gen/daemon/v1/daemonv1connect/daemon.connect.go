// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: daemon/v1/daemon.proto

package daemonv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/codetent/crypta/gen/daemon/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DaemonServiceName is the fully-qualified name of the DaemonService service.
	DaemonServiceName = "daemon.v1.DaemonService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DaemonServiceSetSecretProcedure is the fully-qualified name of the DaemonService's SetSecret RPC.
	DaemonServiceSetSecretProcedure = "/daemon.v1.DaemonService/SetSecret"
	// DaemonServiceGetSecretProcedure is the fully-qualified name of the DaemonService's GetSecret RPC.
	DaemonServiceGetSecretProcedure = "/daemon.v1.DaemonService/GetSecret"
	// DaemonServiceGetProcessIdProcedure is the fully-qualified name of the DaemonService's
	// GetProcessId RPC.
	DaemonServiceGetProcessIdProcedure = "/daemon.v1.DaemonService/GetProcessId"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	daemonServiceServiceDescriptor            = v1.File_daemon_v1_daemon_proto.Services().ByName("DaemonService")
	daemonServiceSetSecretMethodDescriptor    = daemonServiceServiceDescriptor.Methods().ByName("SetSecret")
	daemonServiceGetSecretMethodDescriptor    = daemonServiceServiceDescriptor.Methods().ByName("GetSecret")
	daemonServiceGetProcessIdMethodDescriptor = daemonServiceServiceDescriptor.Methods().ByName("GetProcessId")
)

// DaemonServiceClient is a client for the daemon.v1.DaemonService service.
type DaemonServiceClient interface {
	SetSecret(context.Context, *connect.Request[v1.SetSecretRequest]) (*connect.Response[v1.SetSecretResponse], error)
	GetSecret(context.Context, *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error)
	GetProcessId(context.Context, *connect.Request[v1.GetProcessIdRequest]) (*connect.Response[v1.GetProcessIdResponse], error)
}

// NewDaemonServiceClient constructs a client for the daemon.v1.DaemonService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDaemonServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DaemonServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &daemonServiceClient{
		setSecret: connect.NewClient[v1.SetSecretRequest, v1.SetSecretResponse](
			httpClient,
			baseURL+DaemonServiceSetSecretProcedure,
			connect.WithSchema(daemonServiceSetSecretMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSecret: connect.NewClient[v1.GetSecretRequest, v1.GetSecretResponse](
			httpClient,
			baseURL+DaemonServiceGetSecretProcedure,
			connect.WithSchema(daemonServiceGetSecretMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProcessId: connect.NewClient[v1.GetProcessIdRequest, v1.GetProcessIdResponse](
			httpClient,
			baseURL+DaemonServiceGetProcessIdProcedure,
			connect.WithSchema(daemonServiceGetProcessIdMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// daemonServiceClient implements DaemonServiceClient.
type daemonServiceClient struct {
	setSecret    *connect.Client[v1.SetSecretRequest, v1.SetSecretResponse]
	getSecret    *connect.Client[v1.GetSecretRequest, v1.GetSecretResponse]
	getProcessId *connect.Client[v1.GetProcessIdRequest, v1.GetProcessIdResponse]
}

// SetSecret calls daemon.v1.DaemonService.SetSecret.
func (c *daemonServiceClient) SetSecret(ctx context.Context, req *connect.Request[v1.SetSecretRequest]) (*connect.Response[v1.SetSecretResponse], error) {
	return c.setSecret.CallUnary(ctx, req)
}

// GetSecret calls daemon.v1.DaemonService.GetSecret.
func (c *daemonServiceClient) GetSecret(ctx context.Context, req *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error) {
	return c.getSecret.CallUnary(ctx, req)
}

// GetProcessId calls daemon.v1.DaemonService.GetProcessId.
func (c *daemonServiceClient) GetProcessId(ctx context.Context, req *connect.Request[v1.GetProcessIdRequest]) (*connect.Response[v1.GetProcessIdResponse], error) {
	return c.getProcessId.CallUnary(ctx, req)
}

// DaemonServiceHandler is an implementation of the daemon.v1.DaemonService service.
type DaemonServiceHandler interface {
	SetSecret(context.Context, *connect.Request[v1.SetSecretRequest]) (*connect.Response[v1.SetSecretResponse], error)
	GetSecret(context.Context, *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error)
	GetProcessId(context.Context, *connect.Request[v1.GetProcessIdRequest]) (*connect.Response[v1.GetProcessIdResponse], error)
}

// NewDaemonServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDaemonServiceHandler(svc DaemonServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	daemonServiceSetSecretHandler := connect.NewUnaryHandler(
		DaemonServiceSetSecretProcedure,
		svc.SetSecret,
		connect.WithSchema(daemonServiceSetSecretMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	daemonServiceGetSecretHandler := connect.NewUnaryHandler(
		DaemonServiceGetSecretProcedure,
		svc.GetSecret,
		connect.WithSchema(daemonServiceGetSecretMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	daemonServiceGetProcessIdHandler := connect.NewUnaryHandler(
		DaemonServiceGetProcessIdProcedure,
		svc.GetProcessId,
		connect.WithSchema(daemonServiceGetProcessIdMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/daemon.v1.DaemonService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DaemonServiceSetSecretProcedure:
			daemonServiceSetSecretHandler.ServeHTTP(w, r)
		case DaemonServiceGetSecretProcedure:
			daemonServiceGetSecretHandler.ServeHTTP(w, r)
		case DaemonServiceGetProcessIdProcedure:
			daemonServiceGetProcessIdHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDaemonServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDaemonServiceHandler struct{}

func (UnimplementedDaemonServiceHandler) SetSecret(context.Context, *connect.Request[v1.SetSecretRequest]) (*connect.Response[v1.SetSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.v1.DaemonService.SetSecret is not implemented"))
}

func (UnimplementedDaemonServiceHandler) GetSecret(context.Context, *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.v1.DaemonService.GetSecret is not implemented"))
}

func (UnimplementedDaemonServiceHandler) GetProcessId(context.Context, *connect.Request[v1.GetProcessIdRequest]) (*connect.Response[v1.GetProcessIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.v1.DaemonService.GetProcessId is not implemented"))
}
